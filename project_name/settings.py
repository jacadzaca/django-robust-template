"""
Django settings for {{ project_name }} project.

Generated by 'django-admin startproject' using Django {{ django_version }}.

For more information on this file, see
https://docs.djangoproject.com/en/{{ docs_version }}/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/
"""

import os
from pathlib import Path

from {{ project_name }} import __version__

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/{{ docs_version }}/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '{{ secret_key|safe }}')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = 'SECRET_KEY' not in os.environ

# Specify the dns name in order to render footer in emails
PORT = os.environ.get('PORT', '8080')
DOMAIN = os.environ.get('DOMAIN', f'127.0.0.1:{PORT}')
BASE_URL = f'http://{DOMAIN}'

ALLOWED_HOSTS = [
    '127.0.0.1',
    DOMAIN,
]

CSRF_TRUSTED_ORIGINS = [f'http://{host}' for host in ALLOWED_HOSTS]


# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # this is so `template_name` in forms detects the file in the templates directory
    'django.forms',
    'users',
]

# this is so `template_name` in forms detects the file in the templates directory
FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '{{ project_name }}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                '{{ project_name }}.context_processors.version_context_processor',
            ],
        },
    },
]

WSGI_APPLICATION = '{{ project_name }}.wsgi.application'

# Logging
LOGGING: dict = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '%(levelname)-7s %(name)s %(asctime)s [%(module)s at line %(lineno)s] %(message)-5s',
            'datefmt': '%Y-%m-%dT%H%M:%S',
        },
    },
    'handlers': {
        'console': {
            'formatter': 'default',
            'class': 'logging.StreamHandler',
        },
        'mail_admins': {
            'include_html': True,
            'class': 'django.utils.log.AdminEmailHandler',
        },
    },
    'loggers': {
        'django': {
            'level': 'INFO',
            'propagate': True,
            'handlers': ['console'],
        },
    },
}

if not DEBUG:
    LOGGING['loggers']['django.request'] = {
        'level': 'ERROR',
        'propagate': True,
        'handlers': ['mail_admins'],
    }
    LOGGING['loggers']['django']['handlers'].append('mail_admins')


# Timezone
TIME_ZONE = os.environ.get('TZ', 'UTC')

USE_I18N = True

USE_TZ = True

# Database
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'TIME_ZONE': TIME_ZONE,
    },
}

# Email
try:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'False') == 'True'
    EMAIL_HOST = os.environ['EMAIL_HOST']
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 26))
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
except KeyError:
    EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    EMAIL_FILE_PATH = BASE_DIR / 'x_sent_emails'

DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', '{{ project_name|title }}Bot <{{ project_name }}@example.com>')
SERVER_EMAIL = os.environ.get('SERVER_EMAIL', '{{ project_name|title }} Errors <{{ project_name }}@example.com')
ADMINS = MANAGERS = [
    ('Your Name', 'your.name@example.com'),
]

# Admin panel settings
# https://django-jazzmin.readthedocs.io/configuration/

JAZZMIN_SETTINGS = {
    'site_log': 'logo.png',
    'login_logo': 'logo.png',
    'login_logo_dark': 'logo.png',
    'site_title': f'{{ project_name }} v{__version__}',
    'site_header': '{{ project_name }}',
    'site_brand': '{{ project_name }}',
    'topmenu_links': [
        {'name': 'Homepage', 'url': 'home'},
    ],
}


# Password validation
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#
AUTH_USER_MODEL = 'users.{{ camel_case_project_name }}User'

# default redirect when no next is specified
LOGIN_REDIRECT_URL = 'home'

# Internationalization
# https://docs.djangoproject.com/en/{{ docs_version }}/topics/i18n/

LANGUAGE_CODE = os.environ.get('DJANGO_LOCALE', 'en-us')
USE_THOUSAND_SEPARATOR = os.environ.get('USE_THOUSAND_SEPARATOR', 'True') == 'True'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ docs_version }}/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static/',
]
STATIC_ROOT = os.environ.get('STATIC_ROOT', '/var/www/{{ project_name }}/static')

STORAGES = {
    'default': {
        'BACKEND': 'django.core.files.storage.FileSystemStorage',
    },
    'staticfiles': {
        'BACKEND': 'whitenoise.storage.CompressedManifestStaticFilesStorage',
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

